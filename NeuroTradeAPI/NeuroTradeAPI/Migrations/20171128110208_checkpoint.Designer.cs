// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using NeuroTradeAPI;
using System;

namespace NeuroTradeAPI.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20171128110208_checkpoint")]
    partial class checkpoint
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.0.0-rtm-26452");

            modelBuilder.Entity("NeuroTradeAPI.Batch", b =>
                {
                    b.Property<int>("BatchId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Alias");

                    b.Property<TimeSpan>("Interval");

                    b.Property<DateTime>("Timestamp");

                    b.HasKey("BatchId");

                    b.ToTable("Batches");
                });

            modelBuilder.Entity("NeuroTradeAPI.Candle", b =>
                {
                    b.Property<int>("CandleId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("BatchId");

                    b.Property<float>("Close");

                    b.Property<float>("High");

                    b.Property<float>("Low");

                    b.Property<float>("Open");

                    b.Property<int>("Volume");

                    b.HasKey("CandleId");

                    b.HasIndex("BatchId");

                    b.ToTable("Candles");
                });

            modelBuilder.Entity("NeuroTradeAPI.Candle", b =>
                {
                    b.HasOne("NeuroTradeAPI.Batch", "Batch")
                        .WithMany()
                        .HasForeignKey("BatchId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
